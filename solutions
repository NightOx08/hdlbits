Always case2

Explanation:
A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high.
Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations. 

code:
// synthesis verilog_input_version verilog_2001
module top_module (
    input [3:0] in,
    output reg [1:0] pos  );
    always@(*)
        case(in)
            4'b0001,4'b0011,4'b0101,4'b0111,4'b1101,,4'b1111:pos=2'd0;
            4'b0010,4'b0110,4'b1110,4'b1010:pos=2'd1;
            4'b0100,4'b1100:pos=2'd2;
            4'b1000:pos=2'd3;

            default: pos=2'd0;
        endcase
endmodule

.....................................................................................................

Always casez
Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.

From the previous exercise (always_case2), there would be 256 cases in the case statement. We can reduce this (down to 9 cases) if the case items in the case statement supported don't-care bits. This is what casez is for: It treats bits that have the value z as don't-care in the comparison.

For example, this would implement the 4-input priority encoder from the previous exercise:

always @(*) begin
    casez (in[3:0])
        4'bzzz1: out = 0;   
        4'bzz1z: out = 1;
        4'bz1zz: out = 2;
        4'b1zzz: out = 3;
        default: out = 0;
    endcase
end
A case statement behaves as though each item is checked sequentially (in reality, it does something more like generating a giant truth table then making gates). Notice how there are certain inputs (e.g., 4'b1111) that will match more than one case item. The first match is chosen (so 4'b1111 matches the first item, out = 0, but not any of the later ones).

    There is also a similar casex that treats both x and z as don't-care. I don't see much purpose to using it over casez.
    The digit ? is a synonym for z. so 2'bz0 is the same as 2'b?0
    
  code:
  // synthesis verilog_input_version verilog_2001
module top_module (
    input [7:0] in,
    output reg [2:0] pos  );
always @(*) begin
    casez (in)
        8'bzzzzzzz1: pos = 0;   
        8'bzzzzzz1z: pos = 1;
        8'bzzzzz1zz: pos = 2;
        8'bzzzz1zzz: pos = 3;
        8'bzzz1zzzz: pos = 4;
        8'bzz1zzzzz: pos = 5;
        8'bz1zzzzzz: pos = 6;
        8'b1zzzzzzz: pos = 7;
        default: pos = 0;
    endcase
end
endmodule

..................................................................................

Always nolatches
Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.
-------------------------------
Scancode [15:0] | Arrow key
-------------------------------
16'he06b 	    |  left arrow
16'he072 	    |  down arrow
16'he074 	    |  right arrow
16'he075 	    |  up arrow
Anything else 	|  none 
--------------------------------
Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.

To avoid creating latches, all outputs must be assigned a value in all possible conditions (See also always_if2). Simply having a default case is not enough. You must assign a value to all four outputs in all four cases and the default case. This can involve a lot of unnecessary typing. One easy way around this is to assign a "default value" to the outputs before the case statement:

always @(*) begin
    up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;
    case (scancode)
        ... // Set to 1 as necessary.
    endcase
end

This style of code ensures the outputs are assigned a value (of 0) in all possible cases unless the case statement overrides the assignment. This also means that a default: case item becomes unnecessary. 
Reminder: The logic synthesizer generates a combinational circuit that behaves equivalently to what the code describes. Hardware does not "execute" the lines of code in sequence. 

code:
// synthesis verilog_input_version verilog_2001
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    always @(*) begin  
        up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;
    case (scancode)
       16'he06b: left  = 1;   
       16'he072: down = 1;
       16'he074: right = 1;
       16'he075: up = 1;                         // This gives warning that no default case is used//
       
    endcase
end
endmodule

This method gives no warning
// synthesis verilog_input_version verilog_2001
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    always @(*) begin
        up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;
    case (scancode)
       16'he06b: left  = 1;   
       16'he072: down = 1;
       16'he074: right = 1;
       16'he075: up = 1;
        default:  
            begin
            up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;
            end
    endcase
end
endmodule

..............................................................................................................................

Conditional
Verilog has a ternary conditional operator ( ? : ) much like C:

(condition ? if_true : if_false)

This can be used to choose one of two values based on condition (a mux!) on one line, without using an if-then inside a combinational always block.

Examples:

(0 ? 3 : 5)     // This is 5 because the condition is false.
(sel ? b : a)   // A 2-to-1 multiplexer between a and b selected by sel.

always @(posedge clk)         // A T-flip-flop.
  q <= toggle ? ~q : q;

always @(*)                   // State transition logic for a one-input FSM
  case (state)
    A: next = w ? B : A;
    B: next = w ? A : B;
  endcase

assign out = ena ? q : 1'bz;  // A tri-state buffer

((sel[1:0] == 2'h0) ? a :     // A 3-to-1 mux
 (sel[1:0] == 2'h1) ? b :
                      c )

A Bit of Practice
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). Use the conditional operator to make two-way min circuits, then compose a few of them to create a 4-way min circuit. You'll probably want some wire vectors for the intermediate results. 

code:
module top_module (
    input [7:0] a, b, c, d,
    output [7:0] min);//
    wire [7:0]inter1,inter2;
    
    assign inter1=(a<b?a:b);
    assign inter2=(c<d?c:d);
    assign min=(inter1<inter2?inter1:inter2);
    
endmodule
...............................................................................................
Gates100
Build a combinational circuit with 100 inputs, in[99:0].

There are 3 outputs:

  1)  out_and: output of a 100-input AND gate.
  2)  out_or: output of a 100-input OR gate.
  3)  out_xor: output of a 100-input XOR gate.
  
  code:
  module top_module( 
    input [99:0] in,
    output out_and,
    output out_or,
    output out_xor 
);
    assign out_and	=&in;
	assign out_or	=|in;
    assign out_xor =^in;
endmodule
.......................................................................................
Vector100r
Given a 100-bit input vector [99:0], reverse its bit ordering. 

code:
module top_module( 
    input [99:0] in,
    output [99:0] out
);
  
    integer i;
    always@(*)
        begin
    for(i=0;i<=99;i++)
         out[99-i]=in[i];           //note here that no "assign" statement is used as it can't be used inside a procedural block
        end
endmodule

another code:
module top_module (
	input [99:0] in,
	output reg [99:0] out                                                       // here note that output is made reg data type in module declaration
);
	
	always @(*) begin
		for (int i=0;i<$bits(out);i++)		// $bits() is a system function that returns the width of a signal.
			out[i] = in[$bits(out)-i-1];	// $bits(out) is 100 because out is 100 bits wide.
	end
	
endmodule
..................................................................................................................
Popcount255
A "population count" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector. 


My code:

module top_module( 
    input [254:0] in,
    output [7:0] out );                 // out is storing the count in 8 bit binary
    
   
    reg [7:0] count;                                    
    always @(*) 
        begin
        count=0;
    
        for (int i=0;i<$bits(in);i++)		
            if 	(in[i]==1'b1)
               count++;
  	end
    
    assign out=count;

endmodule

authors code:

module top_module (
	input [254:0] in,
	output reg [7:0] out                                                // note that out is made a reg type
);

	always @(*) begin	// Combinational always block
		out = 0;
		for (int i=0;i<255;i++)
			out = out + in[i];
	end
	
endmodule
....................................................................................................
Adder100i
Create a 100-bit binary ripple-carry adder by instantiating 100 full adders. 
The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out.
To encourage you to actually instantiate full adders, also output the carry-out from each full adder in the ripple-carry adder. 
cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.

code:
    module FA(
    	input a,b,
    	input cin,
    	output cout,sum);
	
    	assign sum  = a^b^cin;
    	assign cout = (a&b)|(b&cin)|(cin&a);
	endmodule

module top_module( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );

    
    
    genvar i;
    generate   
        for(i=0;i<100;i++) 
        begin: Full_adder_block
            if (i==0)
                FA a1(.a(a[i]),.b(b[i]),.cin(cin),.cout(cout[i]),.sum(sum[i]));                     // i==0 is instantiated separately because it has cin as cin of our top module while others have cout of previous as cin which can be generalised.
                                                                                                   // here a1 name is same for both i==0 and others, otherwise it will throw error
            else
                FA a1(.a(a[i]),.b(b[i]),.cin(cout[i-1]),.cout(cout[i]),.sum(sum[i]));
        end
    endgenerate
endmodule


or if you want to name the FA module for i==0 differently other than a1 then instantiate it outside the generate block (also not that genarate block has name otherwise it will ask to name the block)

other way to code it:
module FA(
    input a,b,
    input cin,
    output cout,sum);
	
    assign sum  = a^b^cin;
    assign cout = (a&b)|(b&cin)|(cin&a);
endmodule

module top_module( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );

    genvar i;
    
    FA FA1(a[0],b[0],cin,cout[0],sum[0]);
    generate
        for (i=1; i<100; i=i+1) begin : Full_adder_block
        FA FA(a[i],b[i],cout[i-1],cout[i],sum[i]);
    end
    endgenerate
endmodule

....................................................................................................................
Bcdadd100
You are provided with a BCD one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd {
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );

Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out. 

code:
module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );
    
    wire [98:0]intcout;
    genvar i;
    bcd_fadd FA1(a[3:0],b[3:0],cin,intcout[0],sum[3:0]);
     generate
         for (i=4; i<=392; i=i+4) begin : BCD_adder_block					// caution: i=i+4 is written instead of i=i+1
             bcd_fadd a1(a[i+3:i],b[i+3:i],intcout[(i/4)-1],intcout[i/4],sum[i+3:i]);
    end
    endgenerate
    bcd_fadd a2(a[399:396],b[399:396],intcout[98],cout,sum[399:396]);                  // Note that cout is used instead of extra wire such as intcout[99], otherwise atlast assign cout=intcout[99] has to be done.

endmodule

another way to do it:

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );
	
    wire [99:0]intcout;
    genvar i;
    
    generate
        bcd_fadd FA(a[3:0], b[3:0], cin, intcout[0],sum[3:0]);      				// you write this statement outside generate or inside generate it hardly matters as long as instantiation is proper.
        for (i=4; i<400; i=i+4) begin: bcd_adder_block
            bcd_fadd a1(a[i+3:i], b[i+3:i], intcout[i/4-1],intcout[i/4],sum[i+3:i]);
        end
    endgenerate
    
    assign cout = intcout[99];					/// here you can see that cout is assigned with extra wire intcout[99] which can be avoided if last instance was written separately.
endmodule
......................................................................................................................................................................

Mt2015 eq2
Taken from 2015 midterm question 1k

Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0. 

code:
module top_module(
	input [1:0] A,
	input [1:0] B,
	output z);

	assign z = (A[1:0]==B[1:0]);	// Comparisons produce a 1 or 0 result.
	
	// Another option is to use a 16-entry truth table ( {A,B} is 4 bits, with 16 combinations ).
	// There are 4 rows with a 1 result.  0000, 0101, 1010, and 1111.

endmodule
............................................................................................................

Ringer
Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.

Try to use only assign statements, to see whether you can translate a problem description into a collection of logic gates.

Design hint: When designing circuits, one often has to think of the problem "backwards", starting from the outputs then working backwards towards the inputs. This is often the opposite of how one would think about a (sequential, imperative) programming problem, where one would look at the inputs first then decide on an action (or output). For sequential programs, one would often think "If (inputs are ___ ) then (output should be ___ )". On the other hand, hardware designers often think "The (output should be ___ ) when (inputs are ___ )".

The above problem description is written in an imperative form suitable for software programming (if ring then do this), so you must convert it to a more declarative form suitable for hardware implementation (assign ringer = ___). Being able to think in, and translate between, both styles is one of the most important skills needed for hardware design. 


i.e ringer is 1 when vibrate mode is off and (compulsion) ring mode is on
motor is 1 when both vibrate mode and (compulsion) ring mode is on.
	
---------------------------------
	     ring=1
---------------------------------
vibrate mode=1 | vibrate mode=0
-------------- |-----------------
   motor=1     |    ringer=1
---------------------------------
code:

module top_module (
    input ring,
    input vibrate_mode,
    output ringer,       // Make sound
    output motor         // Vibrate
);
    assign ringer=ring&~vibrate_mode;
        assign motor= vibrate_mode&ring;

endmodule
............................................................................/

